name: real-estate
services:
  api: &api
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    image: estate_api
    container_name: estate_api
    volumes:
      - .:/app:z
      - ./staticfiles:/app/staticfiles
#    ports:
#      - "8000:8000"
    expose:
      - "8000"
    env_file:
      - ./.envs/.env.local
    depends_on:
      - postgres
      - mailpit
      - redis
    command: /start
    networks:
      - estate_nw

  postgres:
    build:
      context: .
      dockerfile: ./docker/local/postgres/Dockerfile
    image: estate_postgres
    container_name: estate_postgres
    ports:
      - "5433:5432"
    volumes:
      - estate_postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.envs/.env.local
    networks:
      - estate_nw

  mailpit:
    image: docker.io/axllent/mailpit:v1.15
    container_name: estate_mailpit
    ports:
      - "8025:8025"
      - "1025:1025"
    volumes:
      - estate_mailpit_data:/data
    environment:
      MP_MAX_MESSAGES: 5000
      MP_DATA_FILE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    networks:
      - estate_nw


  frontend:
    build:
      context: ./../frontend
      dockerfile: ./docker/local/Dockerfile
    container_name: estate_frontend
    image: estate_frontend
#    ports:
#       - "3000:3000"
    expose:
      - "3000"
    volumes:
      - ./../frontend:/app
      - /app/node_modules
    # add this line(uncomment it) so that hot module reloading can work when working with windows subsystem for linux.
    environment:
      - WATCHPACK_POLLING=true
    networks:
      - estate_nw

  redis:
    image: redis:7.0-alpine3.19
    command: redis-server --appendonly yes
    container_name: estate_redis
    volumes:
      - estate_redis_data:/data
    networks:
      - estate_nw

  celeryworker:
    <<: *api
    image: estate_celeryworker
    container_name: estate_celeryworker
    command: /start-celeryworker

  celerybeat:
    <<: *api
    image: estate_celerybeat
    container_name: estate_celerybeat
    command: /start-celerybeat

  flower:
    <<: *api
    image: estate_flower
    container_name: estate_flower
    ports:
      - "5555:5555"
    command: /start-flower

  nginx:
    build:
      context: ./docker/local/nginx
      dockerfile: Dockerfile
    restart: always
    container_name: estate_nginx
    ports:
      - "8080:80"
    volumes:
      - ./staticfiles:/app/staticfiles
      - logs_store:/var/log/nginx
    depends_on:
      - api
    networks:
      - estate_nw

networks:
  estate_nw:
    external: true

volumes:
  estate_postgres_data: {}
  estate_mailpit_data: {}
  logs_store: {}
  estate_redis_data: {}

